(declare-const al Int)
(declare-const au Int)
(declare-const bl Int)
(declare-const bu Int)
(declare-const cl Int)
(declare-const cu Int)
(declare-const dl Int)
(declare-const du Int)

(define-fun edge ((xl Int) (xu Int) (yl Int) (yu Int)) Bool 
    (exists ((z Int)) (and (and (< z xu) (< z yu)) (and (< xl z) (< yl z)))) )

(define-fun legal ((xl Int) (xu Int)) Bool
    (< xl xu))

(assert (not ( and (and (not (edge al au cl cu)) (not (edge dl du bl bu))) (and (and (and (legal al au) (legal bl bu)) (and (legal cl cu) (legal dl du))) 
(and (and (edge al au bl bu) (edge cl cu bl bu)) (and (edge cl cu dl du) (edge al au dl du)))))))

(check-sat)
(get-model)
